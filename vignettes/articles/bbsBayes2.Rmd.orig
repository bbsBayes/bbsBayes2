---
title: "Get Started"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Get Started}
  %\VignetteEncoding{UTF-8}
  %\VignetteEngine{knitr::rmarkdown}
editor_options:
  markdown:
    wrap: 72
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  # For pre-compiling and pkgdown (relative to pkg home)
  fig.path = "vignettes/articles/figures/bbsBayes2_",
  dpi = 150
)

```

```{r, message = FALSE}
library(bbsBayes2)
library(tidyverse)
```

# Welcome!

bbsBayes2 is the successor to
[bbsBayes](https://github.com/bbsBayes/bbsBayes), with a major shift in
functionality. The MCMC backend is now *Stan* instead of *JAGS*, the
workflow has been streamlined, the syntax has changed, and there are new
functions. This vignette should help you get started with the package,
and there are three others that should help explain some of the new
features, choices, and more advanced uses:

-   [Stratification vignette](./stratification.html) The stratification
    vignette explains the built-in options for spatial stratifications
    as well as the workflow required to apply a custom stratification.

-   [Models vignette](./models.html) The models vignette explains the
    four built-in models that differ in the way the temporal components
    are structured, and it also covers the built-in options for error
    distributions and the differences among the model variants (e.g.,
    `model_variant = "spatial"`).

-   [Advanced vignette](./advanced.html) The advanced vignette is
    helpful for users wanting to take the bbsBayes2 functionality
    further, including alternate calculations of population trend,
    customizing the Stan models, adding covariates, and even some
    experimental functions that allow for k-fold cross-validations and
    approximate leave-one-out calculations to compare fit and predictive
    accuracy among models.

First we'll make sure we have the right software installed, we'll fetch
the BBS survey data, and then we'll run through some example workflows.


## Install [bbsbayes2](https://github.com/bbsBayes/bbsBayes2)

If you haven't already, install bbsBayes2 from the R-Universe.

```{r, eval = FALSE}
install.packages("bbsBayes2", repos = c(bbsbayes = "https://bbsbayes.r-universe.dev",
                                        CRAN = getOption("repos")))
```

Note that due to non-CRAN dependencies, bbsBayes2 is not available on CRAN and
must be installed from GitHub or the R-Universe.

## Install [cmdstanr](https://mc-stan.org/cmdstanr/)

Because bbsBayes2 uses Stan to run the Bayesian models, we need to make
sure we have cmdstanr and cmdstan both installed.

Run this in a fresh R session.

```{r, eval = FALSE}
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/",
                                       getOption("repos")))
```

Now we should be able to use cmdstanr to install cmdstan

```{r, eval = FALSE}
cmdstanr::install_cmdstan()
```

Let's check that everything went as planned

```{r, eval = TRUE}
cmdstanr::check_cmdstan_toolchain()
```

> Problems? Check out cmdstanr's vignette on [Getting
> Started](https://mc-stan.org/cmdstanr/articles/cmdstanr.html)

### Special note for Windows users

We strongly recommend that you install Linux on your Windows machine and
take advantage of `cmdstanr` functions that run `Stan` models in Linux.
This will likely cut the MCMC run-times by 30-50% for the `bbsBayes2`
models. Installing [Windows Subsystem for Linux
(WSL)](https://learn.microsoft.com/en-us/windows/wsl/install) is a small
hassle, but only needs to be done once. Follow the directions at the
above link.

Once the WSL installation is complete, re-install `cmdstan` using
`cmdstanr::install_cmdstan(overwrite = TRUE, wsl = TRUE)`. Now,
everytime you run a model using `cmdstan` (and therefore anytime you run
a model using `bbsBayes2`), it will use the Linux installation to run
Stan. It's seamless and you'll be very thankful you did it once it's
done.

## Download BBS data

Now we'll fetch the BBS data using the `fetch_bbs_data()` function.

```{r, message = FALSE, eval=FALSE}
library(bbsBayes2)
fetch_bbs_data() #
```
This will save the data to a package-specific directory on your computer. You must agree to the terms and conditions of the data usage before the download will run (type `yes` at the prompt). The message also includes the key metadata for the dataset, including the citation, acknowledgements, and the release-version (below). You only need run this function once for each annual update of the BBS database (these updates usually occur in the summer, approximately 1-year following the data collection).

> Note: Most bbsBayes2 functionality can be explored **without**
> downloading BBS data by using the included sample data. Specify
> `sample_data = TRUE` in the first `stratify()` step (see the next
> section).


There are (as of August 2023) two types of BBS data that can be
downloaded, and three release-versions:

-   Two levels `state` and `stop` (only `state` works with bbsBayes2
    models, the `stop` option is provided to facilitate custom projects and models)
-   Two releases `2020`, `2022` and `2023` (more options will be added as annual releases occur). 

The defaults (level `state` and the most recent release - `2023`) is almost certainly what you are looking for, Unless you have a specific reason to need a different version. The most recent release will include all of the data included in earlier releases.
However you can download all data sets and specify which one you wish to
use in the `stratify()` step.

### A note about BBS release names:

The releases are named for the year in which the annual dataset was
released after going through QA-QC. So the `2022` release contains all
surveys conducted up to and including the 2021 field season.
There is no
`release = 2021`, because the BBS was cancelled during the COVID
lockdowns of spring 2020 so no data were collected and there was no updated data to release the following year.

```{r, eval = FALSE}
fetch_bbs_data()                  # Default - most recent release
fetch_bbs_data(release = "2020")  # Specify a different release
```

```{r, echo = FALSE, eval = !have_bbs_data()}
fetch_bbs_data()
```

## Workflow overview

We can visualize the bbsBayes2 workflow with this flow chart of
functions.

The functions are colour coded by category:

-   BBS Data - Blue
-   Data Prep - Pink
-   Modelling - Green
-   Exploring model trends and indices - Purple
-   General helper functions - Orange

Functions which are connected by a **solid, black** arrow, indicate that
the output of the first function is required as input to the second. For
example, the output of `stratify()` is required input for
`prepare_data()`.

Functions which are connected by a **solid, grey** arrow, indicate that
the output of the first function is *optional* input to the second. For
example, the output of `grenerate_trends()` is an option input for
`plot_geofacet()`.

Functions which are connected by a **dotted** arrow indicate that the
first function can be used to create input for the second, but not
necessarily directly. For example, `fetch_bbs_data()` downloads BBS data
which is used by `stratify()`, but it isn't an input. Alternatively,
`load_map()` can load a spatial data file for a specific stratification
which can be modified by the user and then used as input to
`prepare_spatial()` or `generate_indices()`.

See the [Function Reference](../reference) for more details on how to
use a particular function.


```{r, echo = FALSE, fig.cap = "", fig.alt = "", fig.width = 8, fig.asp = 1.5}
library(DiagrammeR)
grViz("digraph functions {

  # a 'graph' statement
  graph [overlap = true, fontsize = 10 compound = true, ranksep = 0.5]

  # several 'node' statements
  node [shape = rectangle, fontname = 'Courier New',
        fixedsize = false, style=filled, fillcolor=white]

  fetch [label = 'fetch_bbs_data()', fillcolor=lightblue]
  remove [label = 'remove_cache()', fillcolor=orange]
  loadbbs [label = 'load_bbs_data()', fillcolor=lightblue]

  search [label = 'search_species()', fillcolor=orange]
  strat [label = 'stratify()', fillcolor=lightpink]
  prepdata [label = 'prepare_data()', fillcolor=lightpink]
  prepspatial [label = 'prepare_spatial()', fillcolor=lightpink]
  prepmodel [label = 'prepare_model()', fillcolor=darkolivegreen3]
  loadmap [label = 'load_map()', fillcolor=orange]
  assign_ps [label = 'assign_prov_state()', fillcolor=orange]

  runmodel [label = 'run_model()', fillcolor=darkolivegreen3]
  modelfile [label = 'copy_model_file()', fillcolor=darkolivegreen3]

  conv[label = 'save_model_run()\nget_convergence()\nget_model_vars()\nget_summary()', fillcolor=darkolivegreen3]

  genind [label = 'generate_indices()', fillcolor=thistle]
  gentre [label = 'generate_trends()', fillcolor=thistle]
  geo [label = 'plot_geofacet()', fillcolor=thistle]
  plotind [label = 'plot_indices()', fillcolor=thistle]
  genmap [label = 'plot_map()', fillcolor=thistle]


  # several 'edge' statements
  edge []
  fetch->remove [style=dashed]
  fetch->loadbbs [style=dashed]
  fetch->strat [style=dashed]

  runmodel->remove [style=dashed]

  modelfile->prepmodel [style=dashed]

  search->strat [style=dashed]
  strat->prepdata
  prepdata->prepspatial
  prepdata->prepmodel [color=grey50]
  prepspatial->prepmodel [color=grey50]
  prepmodel->runmodel


  runmodel->conv
  runmodel->genind
  genind->gentre

  loadmap->assign_ps  [style=dashed]
  loadmap->genind [style=dashed]
  loadmap->prepspatial [style=dashed]
  loadmap->strat [style=dashed]

  genind->plotind
  genind->geo
  gentre->geo [color=grey50]
  gentre->genmap

  # Invisible edges for arranging
  prepspatial->conv [style=invis]
}")
```

## Workflow to fit models

> Note: If you would prefer to skip the model-fitting process for now,
skip down to [Workflow to explore the model outputs](#explore_output).

Now that you have cmdstanr installed and the BBS data downloaded, we'll
walk through a general workflow for modelling species trends with
bbsBayes2.

### Stratify the data

The first step in any bbsBayes2 analysis is to stratify the data. In
this step we choose a stratification type as well as a species to
explore.

```{r, eval = have_bbs_data()}
s <- stratify(by = "bbs_usgs", species = "Scissor-tailed Flycatcher")
```

We can also play around with the included sample data (Pacific Wrens)

```{r}
s <- stratify(by = "bbs_cws", sample_data = TRUE) # Only Pacific Wren
```

Stratifications included in bbsBayes2 are
`r paste0(names(bbs_strata), collapse = ", ")`. See the article on
[stratifications](articles/stratification) for more details and
examples.

#### Species names in bbsBayes2

Let's first take a brief step out of the workflow to explain important information about species names in bbsBayes2.

All of the models in the package are species-specific. So the species is a fundamental aspect of any analysis.
The `search_species()` function allows the user to search up the species names in the BBS database, using text from the English, Spanish, French, or Latin names. The English names for each species will be retained in the metadata at every step of the workflow.

```{r}
search_species("Geai bleu")
search_species("Cyanocitta")
search_species("Corvidae")
```
##### Species groupings

There are some taxonomic groupings of species-units in the BBS database
that bbsBayes2 by default also combines into combined species forms. These
represent groupings that make sense based on changes in taxonomy or
potentially inconsistent distinctions among observers, routes, regions, or time.

-   There are groupings that represent species considered distinct in
    the early portion of the BBS history that have been lumped into a
    single species at some point since then. For example, the Northern
    Flicker observations exist in the BBS database separately as
    Red-shafted Flicker (4130), Yellow-shafted Flicker (4120), unidentified Red/Yellow-shafted Flicker (4123) or hybrid Red x Yellow-shafted Flicker (4125). To provide an appropriate dataset to represent population trends of Northern Flicker, bbsBayes2 by default sums all of these observations into a new *species* called Northern Flicker (all forms), which replaces the (4123) unidentified category in the species database. The remaining original separate forms (Red, Yellow, and hybrid) are retained.
-   Similar combined *species* are created for taxonomic splits that have occurred since the start of the BBS, such as Clark's and Western Grebe, which are retained as their own separate species, but are also combined into Western Grebe (Clark's/Western) (12).

You can access a complete list of these combined *species* groups and the sub groups that make them up.

```{r}
species_forms
```

If you're looking for a complete list of all species in the BBS database.
```{r}
all_species_bbs_database <- load_bbs_data()$species
```


> Note: Because models can take hours to days to run,
if you're exploring the package functionality, we recommend
using species with relatively small ranges (i.e., relatively few data)
such as the Hepatic Tanager, Pacific Wren, or Scissor-tailed Flycatcher.

### Prepare the data

Once we have stratified the data, we can now prepare it for use in a
model. In this step data will be filtered to omit routes with too few
samples, etc. See `prepare_data()` for more details on how you can
customize this step.

```{r}
p <- prepare_data(s)
```

### Prepare the model

Next we will prepare the model parameters and initialization values. See
`prepare_model()` for more details on how you can customize this step.

```{r}
md <- prepare_model(p, model = "first_diff")
```

### Run model

Now we can run the model.

The default `iter_sampling` and `iter_warmup` are 1000 and the default
`chains` is 4. In the interest of speed for this example, we are using
much lower values, but note that this almost certainly will result in
problems with our model.

```{r, eval = FALSE}
m <- run_model(md, iter_sampling = 100, iter_warmup = 500, chains = 2)
```

### Additional steps for spatial models

For spatial models there are two additional steps. You stratify and
prepare the data as in the previous example, but you also prepare the
map and the spatial data. An example is below.

```{r, eval=TRUE}
s <- stratify(by = "bbs_usgs", species="Scissor-tailed Flycatcher")
p <- prepare_data(s)
```

And now the additional steps...
```{r, eval = TRUE}
# Load a map
map <- load_map(stratify_by = "bbs_usgs")
# Prepare the spatial data
sp <- prepare_spatial(p, map)
```
Then the remaining steps are the same but we use `model_variant = "spatial"` in  `prepare_model()`.
```{r, eval=FALSE}
# Then prepare the model with the spatial output
mod <- prepare_model(sp, model = "gamye", model_variant = "spatial")

# Then run the model as before
m <- run_model(mod)

# Optionally, save the model output as an .rds file
saveRDS(m, "output/4430_gamye_spatial.rds")
```
The spatial aspects of the spatial model variants use an intrinsic Conditional Autoregressive structure (iCAR) to share information among neighbouring strata on the population abundance and trend parameter ([Besag et al. 1991](https://doi.org/10.1007/BF00116466), [ver Hoef et al. 2018](http://doi.wiley.com/10.1002/ecm.1283), [Morris et al. 2019](https://doi.org/10.1016/j.sste.2019.100301)). For more information about the bbsBayes2 models and the spatial models see the [models vignette](./models.html) and [Smith et al., 2023 pre-print](https://doi.org/10.32942/X2088D).

The prepared spatial data object includes a map of the spatial neighbourhood relationships for a given species and stratification.

```{r, fig.cap = "", fig.alt = "Map showing the strata and neighbourhood relationships among them for Scissor-tailed Flycatcher", fig.width = 8, fig.asp = 0.8}
print(sp$spatial_data$map)
```

## Workflow to explore the model outputs {#explore_output}

If you would prefer to skip the model fitting steps for now, you can
[download a fitted model](https://drive.google.com/file/d/1zF8xOIn_ZuORmjNDHAu5YCJjIx4j-MHC/view?usp=drive_link) object (the output of `run_model()` function)
and test out the remaining package features.

The outputs of the collection of functions required to fit a model are
cumulative: each one retains the metadata from the previous step. As a
result, the saved object from the `run_model()` function is a large list
that includes the `cmdstanr` posterior samples object from the model
fitting process, as well as all of the data and metadata necessary to
understand and replicate the choices made to fit the model.

```{r}
m <- readRDS("output/4430_gamye_spatial.rds")
names(m)
```

### Convergence and parameter summaries

First, we will investigate the model convergence and the parameter
estimates of the model. There are two key helper functions in
`bbsBayes2` that provide information on model convergence:
`get_convergence()` calculates convergence diagnostics and
`get_summary()` calculates the convergence diagnostics as well as
summary statistics (mean, median, credible intervals) for all parameters
in a fitted model.

```{r,eval=FALSE}
# Convergence diagnostics for all parameters
converge <- get_convergence(m)
```

```{r}
# Convergence diagnostics for all smoothed annual indices
converge_n_smooth <- get_convergence(m, variables = "n_smooth") %>%
  arrange(-rhat)
converge_n_smooth
```

Here we've sorted the convergence diagnostics by rhat values (highest values at the top to highlight any problems). Cut-offs for rhat statistics are somewhat arbitrary and recommendations vary in the literature, but values of
rhat \> 1.1 indicate a *serious* problem with the convergence of some of the
parameters in the model (i.e., there is more variation among the
independent chains than within them) and values of ess_bulk \<
~400 suggest an imprecise estimate of the parameter. In
some cases, refitting the model with more iterations (both warmup and
sampling) may improve convergence. More advice on exploring Bayesian
model convergence can be found
in [Gabry et al., 2019](https://doi.org/10.1111/rssa.12378). bbsBayes2 relies on functions in the packages `cmdstanr` and `posterior` to calculate rhat values following [Vehtari et al. 2021](https://doi.org/10.1214/20-BA1221).


```{r, eval=FALSE}
m <- run_model(mod,
               iter_warmup = 2000,
               iter_sampling = 2000)
```

It is possible to thin the MCMC chains by passing arguments from
`cmdstanr::sample()` into the `run_model()` function. The call below would
result in the same number of posterior samples as `run_model()`
defaults, but may improve the efficiency of the sampling (and of course
would also increase the time required to fit the model by a factor of
approximately 4).

```{r, eval=FALSE}
m <- run_model(mod,
               iter_warmup = 4000,
               iter_sampling = 4000,
               thin = 4)
```

If you want summary statistics of the parameters, as well as convergence
diagnostics, the function `get_summary()` may be more useful.

```{r, eval=FALSE}
# Summary statistics and convergence diagnostics for all parameters
summary_stats <- get_summary(m)
```

```{r}
# Summary statistics and convergence diagnostics for all smoothed annual indices
summary_stats_n_smooth <- get_summary(m, variables = "n_smooth") %>%
  arrange(-rhat)
summary_stats_n_smooth
```

### Indices - predictions of annual relative abundance

Indices (annual indices of relative abundance) represent mean predicted
annual counts of the species in a given region, on an average route, by
an average observer. The pattern in the time-series of these annual
indices for a given region represent the estimated population
trajectory. We generate indices according to different categories of
regional summaries. All of the bbsBayes2 models are stratified based on
geographic spatial units, and these categories of regions are either
these strata (`generate_indices(region = "stratum")`), or some
combination of strata. By default the selected regions for most model
summaries are `continent` and `stratum`. The `continent` estimates
represent the area- and abundance-weighted means across all strata,
other regional summaries are built in for some stratifications that
allow it (e.g., `region = "country"` for the stratifications `bbs_usgs`,
`bbs_cws`, or `prov_state`).

```{r}
i <- generate_indices(model_output = m)
```

We can explore or extract these indices for saving as an external file
(e.g., export to .csv), by accessing the `indices` item in the list.

```{r}
i[["indices"]]
```
### Trajectory plots

We can also generate time-series plots of these indices to visualize population trajectories.

```{r}
# generates a list of ggplot graphs, one for each region
p <- plot_indices(indices = i,
                  add_observed_means = TRUE) # optional argument to show raw observed mean counts
```

Note that we get one plot for each region and regional category, in this
case that means one plot for the continent, and one for each stratum.

```{r}
names(p)
```

We can plot them individually by pulling a plot out of the list

```{r, fig.cap = "", fig.alt = "Population trajectory graph, showing the estimated annual relative abundances, their associated 95% credible intervals, and points representing the raw mean observed counts.", fig.width = 8, fig.asp = 0.8}
print(p[["continent"]])
```

Each of these plots is a [ggplot2](https://github.com/tidyverse/ggplot2)
object that can be modified like any other. For example, you can modify
titles or axes.

```{r, fig.cap = "", fig.alt = "Population trajectory graph, modified to show only the last 20 years of the time-series and remove the title", fig.width = 8, fig.asp = 0.8}
library(ggplot2)

p1_mod <- p[["continent"]]+
  coord_cartesian(xlim = c(2000,NA))+ #subset of years
  labs(title = "") # remove the title
print(p1_mod)
```

### Trends - predictions of mean rates of change over time

Next we can calculate the long-term trends based on these indices. Note
all trends from bbsBayes2 models are derived from summaries of indices
through time or between two points in time.

```{r}
t <- generate_trends(i)
```

We can explore or extract these trends for saving as an external file
(e.g., export to .csv), by accessing the `trends` item in the list.

```{r}
t[["trends"]]
```

We can generate trends for different periods of time, using any
combination of a starting year `min_year` and ending year `max_year`.

```{r}
t_10 <- generate_trends(i,
                        min_year = 2011,
                        max_year = 2021)
t_10
```

### Trend maps - visualizing the spatial variation in trends

We can plot trend estimates on a map to visualise the spatial patterns
in population change.

```{r, fig.cap = "", fig.alt = "Population trend map showing strata with increasing trends in blues and decreasing trends in reds.", fig.width = 8, fig.asp = 0.8}
trend_map <- plot_map(t)
print(trend_map)
```

The maps are also [ggplot2](https://github.com/tidyverse/ggplot2)
objects that can be modified like any other. For example, you can zoom
into a section of the map.

```{r, fig.cap = "", fig.alt = "Population trend map zoomed in to show just the relevant regions", fig.width = 8, fig.asp = 0.8}
library(ggplot2)

# Get the meta data in trend object - strata information
strata_with_data <- t$meta_strata

# Load the original strata map used in the model fitting
# then filter to just the strata with data for this species
data_bounding_box <- load_map(stratify_by = t$meta_data$stratify_by) %>%
  filter(strata_name %in% strata_with_data$strata_name) %>%
  sf::st_bbox() # create a bounding box for x and y limits

t_mod <- trend_map +
  coord_sf(xlim = data_bounding_box[c("xmin","xmax")],
           ylim = data_bounding_box[c("ymin","ymax")])

print(t_mod)

```

### Barn Swallow example

A model with a suitable number of iterations takes a long time to run
(the Barn Swallow model, a species with many data and many strata, took
54 hours).

You can download a zip-file with a saved model output for Barn Swallow here:

[An example of the output from applying the spatial gamye model to Barn
Swallow data](https://drive.google.com/file/d/1RNbM312_isopRN7Lb-jP1-wK4UvRKkHE/view?usp=sharing).

Unzip the file and store it in a local directory.
In this example we've placed it in a sub-directory of our working directory called *output*.

Let's take a look at the spatial GAMYE model for the Barn Swallow.

First we load the data
```{r}
BARS <- readRDS("output/Barn_Swallow_gamye_spatial.rds")
```

We can investigate the model meta data
```{r}
BARS$meta_data
```

See the length of the run in seconds or hours
```{r}
BARS$model_fit$time()
BARS$model_fit$time()$total/3600
```

Now create the indices and trends
```{r, fig.cap = "", fig.alt = "Population trajectory graph for Barn Swallow, showing the estimated annual relative abundances, their associated 95% credible intervals, and points representing the raw mean observed counts.", fig.width = 8, fig.asp = 0.8}

BARS_indices <- generate_indices(BARS)

BARS_index_plots <- plot_indices(BARS_indices,
                                 add_observed_means = TRUE,
                                 add_number_routes = TRUE)

BARS_continent <- BARS_index_plots[["continent"]]
print(BARS_continent)
```

### Smoothed population trajectories - gamye model

Above, we've plotted the full annual indices (i.e., the population
trajectory) from the gamye model. In the *gamye* and *slope* models, the
population trajectory can be decomposed into two components: the smooth
component and the annual fluctuations around the smooth. The default
estimate of the population trajectory uses the *full* version of the
annual indices (`generate_indices(alternate_n = "n")`). For the gamye
model the alternate population trajectory that represents only the
semi-parametric smooth component can be accessed by choosing the
`generate_indices(alternate_n = "n_smooth")` option. For the slope model
the alternate population trajectory that represents the linear smooth
only can be accessed by choosing the
`generate_indices(alternate_n = "n_slope")` option. These smooth
trajectories may be useful for trend estimates that vary less from
year-to-year (gamye model) or for an overall linear trend from a slope
model applied to a short time-frame (it's probably unlikely that a
linear smooth is reasonable for long periods of time).

```{r, fig.cap = "", fig.alt = "Population trend map for Barn Swallow, showing strata with increasing trends in shades of blue and strata with decreasing trends in shades of red", fig.width = 8, fig.asp = 0.8}
BARS_smooth_indices <- generate_indices(BARS,
                                        alternate_n = "n_smooth")
BARS_trends <- generate_trends(BARS_smooth_indices)
BARS_trend_map <- plot_map(BARS_trends)
BARS_trend_map

```
### Modifying base plots

We can also add the smoothed annual indices to the plots of the full
annual indices from above, taking advantage of the [ggplot2](https://github.com/tidyverse/ggplot2) functions such as `geom_line()`.

```{r, fig.cap = "", fig.alt = "Population trajectory graph for Barn Swallow, same as above plus the smoothed annual indices are added as a grey line", fig.width = 8, fig.asp = 0.8}
library(ggplot2)

smooth_cont_indices <- BARS_smooth_indices$indices %>%
  filter(region == "continent")

BARS_continent_both <- BARS_continent +
  geom_line(data = smooth_cont_indices,
            aes(x = year, y = index),
            alpha = 0.5,
            linewidth = 1)+
  labs(subtitle = "grey line represents the smoothed annual indices")

print(BARS_continent_both)
```

Check out the other articles to explore more advanced
usage or the [function reference](../reference/) to see what functions
are available and how to use them in greater detail.
